generator client {
  provider  = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Player {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  nickname                    String
  age                         Int
  position                    String
  score                       Int
  user                        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                      String            @unique @db.ObjectId
  groups                      GroupPlayer[]
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

type UserRole {
  groupId                     String            @db.ObjectId
  permission                  String
}

model User {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  phone                       String
  password                    String
  roles                       UserRole[]
  player                      Player?           @relation()
  groups                      Group[]           @relation()
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model Group {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  name                        String            @unique
  description                 String?
  imageUrl                    String?
  createdBy                   String            @db.ObjectId
  creator                     User              @relation(fields: [createdBy], references: [id])
  players                     GroupPlayer[]
  matches                     Match[]
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model GroupPlayer {
  id                          String            @id @default(auto()) @map("_id") @db.ObjectId
  group                       Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId                     String            @db.ObjectId
  player                      Player            @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId                    String            @db.ObjectId
  paymentRecurrence           String
  matches                     MatchPlayer[]
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt

  @@unique([groupId, playerId])
}

type MatchLocation {
  latitude                    String
  longitude                   String
}

model Match {
  id                           String        @id @default(auto()) @map("_id") @db.ObjectId
  location                     MatchLocation
  schedulling                  DateTime
  maxPlayerLimit               Int
  playersPerTeam               Int
  groupId                      String        @db.ObjectId
  group                        Group         @relation(fields: [groupId], references: [id])
  players                      MatchPlayer[]
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
}

model MatchPlayer {
  id                           String        @id @default(auto()) @map("_id") @db.ObjectId
  player                       GroupPlayer   @relation(fields: [playerId], references: [id])
  playerId                     String        @db.ObjectId
  match                        Match         @relation(fields: [matchId], references: [id])
  matchId                      String        @db.ObjectId
}
